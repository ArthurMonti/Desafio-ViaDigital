{"remainingRequest":"C:\\Users\\arthu\\Desktop\\ViaDigital\\frontend-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\arthu\\Desktop\\ViaDigital\\frontend-vue\\src\\views\\Board.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\arthu\\Desktop\\ViaDigital\\frontend-vue\\src\\views\\Board.vue","mtime":1628563428912},{"path":"C:\\Users\\arthu\\Desktop\\ViaDigital\\frontend-vue\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\arthu\\Desktop\\ViaDigital\\frontend-vue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\arthu\\Desktop\\ViaDigital\\frontend-vue\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\arthu\\Desktop\\ViaDigital\\frontend-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\arthu\\Desktop\\ViaDigital\\frontend-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi50ZXh0IHsNCiAgdGV4dC1hbGlnbjogbGVmdDsNCn0NCg0KLmJvYXJkIHsNCiAgbWFyZ2luLXRvcDogMSU7DQogIGRpc3BsYXk6IGZsZXg7DQogIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDsNCiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7DQp9DQoNCi5DYXJkIHsNCiAgYmFja2dyb3VuZC1jb2xvcjogI2Q3ZDdkNzsNCiAgbWFyZ2luLWxlZnQ6IDElOw0KfQ0KDQoucGxhY2Vob2xkZXIgew0KICBiYWNrZ3JvdW5kOiAjQ0VDRUNFOw0KICBib3JkZXItcmFkaXVzOiAwLjRyZW07DQogIHRyYW5zZm9ybTogc2NhbGVZKDAuODUpOw0KICB0cmFuc2Zvcm0tb3JpZ2luOiAwJSAwJTsNCn0NCg0KLmxhbmUgew0KICB3aWR0aDogMjNyZW07DQogIGJveC1zaGFkb3c6IDAgMC4xcmVtIDAuMnJlbSAwICNkY2RjZGM7DQogIG1hcmdpbjogMSUgMSU7DQp9DQo="},{"version":3,"sources":["Board.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqNA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"Board.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <div>\r\n    <div >\r\n      <Container :drop-placeholder=\"{className: 'placeholder'}\" class=\"board\">\r\n        <Draggable  v-for=\"container in containers\" :key=\"container.id\" >\r\n          <div class=\"card Card\">\r\n            <header class=\"card-header\">\r\n              <p class=\"card-header-title\">{{container.name}}</p>\r\n              <button class=\"card-header-icon\" aria-label=\"more options\">\r\n                <span class=\"icon\">\r\n                  <i class=\"fas fa-angle-down\" aria-hidden=\"true\"></i>\r\n                </span>\r\n              </button>\r\n            </header>\r\n            <div class=\"lane\">\r\n              <div>\r\n                <Container\r\n                  group-name=\"container\"\r\n                  \r\n                  @drag-start=\"DragStart(container, $event)\"\r\n                  @drop=\"DropEnd(container, $event)\"\r\n                  :get-child-payload=\"getChildPayload\"\r\n                  :drop-placeholder=\"{ className: 'placeholder' }\"\r\n                >\r\n                  <Draggable style=\"text-align: left\" v-for=\"card in container.cards\" :key=\"card.id\">\r\n                    <Card><LabelEdit :text=\"card.name\" :card=\"card\" @updatedText=\"textUpdated($event,card)\"></LabelEdit>\r\n                    <p>-</p></Card>\r\n                    \r\n                  </Draggable>\r\n                  \r\n                </Container>\r\n              </div>\r\n            </div>\r\n            <footer class=\"card-footer rodape\">\r\n              <a  @click=\"newCard(container)\" class=\"card-footer-item\">Adicionar Cartão</a>\r\n            </footer>\r\n          </div>\r\n        </Draggable>\r\n        \r\n\r\n        <div class=\"card Card\">\r\n        <header class=\"card-header\">\r\n          <a type=\"button\" class=\"card-header-title\"> Adicionar Coluna + </a>\r\n        </header>\r\n      </div>\r\n      </Container>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Card from \"../components/Card.vue\";\r\nimport { Container, Draggable } from 'vue-smooth-dnd';\r\nimport LabelEdit from \"../components/LabelEdit.vue\";\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n   data() {\r\n    return {\r\n      containers: [],\r\n      cards: [],\r\n      draggingCard: {\r\n        container: \"\",\r\n        index: -1,\r\n        cardData: {},\r\n      },\r\n    }\r\n   },\r\n    created: async function(){\r\n        if(this.User == null)\r\n        {\r\n           // this.$router.push(\"/\");\r\n            //alert(\"Realize o Login para acessar a página de Quadros!\");\r\n        }\r\n        await axios.get(\"https://localhost:44360/Containers/filter/2\").then((res) =>{\r\n          this.containers = res.data;\r\n          this.containers.forEach( container => {\r\n            axios.get(\"https://localhost:44360/Cards/filter/\"+container.id ).then((res)=>{\r\n              container.cards = res.data;\r\n              container.cards.sort(this.compare);\r\n              //console.log(container.cards);\r\n              \r\n            }).catch((err)=>{\r\n              alert(err);\r\n            });\r\n          });\r\n        }).catch((err) =>{\r\n          console.log(err);\r\n        });\r\n    },\r\n \r\n  props: {\r\n    User: Object,\r\n\r\n  },\r\n  components: {\r\n    LabelEdit,\r\n    Card,\r\n    Container,\r\n    Draggable,\r\n  },\r\n  methods:\r\n   {\r\n    DragStart: function (container, dragResult) {\r\n      const { payload, isSource } = dragResult;\r\n      if (isSource) {\r\n        this.draggingCard = {\r\n          container,\r\n          index: payload.index,\r\n          cardData: {\r\n            ...this.containers[container.position].cards[payload.index],\r\n          },\r\n        };\r\n        \r\n      }\r\n    },\r\n    DropEnd: function (container, dropResult) {\r\n      const { removedIndex, addedIndex } = dropResult;\r\n      if (container === this.draggingCard.container && removedIndex === addedIndex) {\r\n        return;\r\n      }\r\n\r\n      if (removedIndex !== null) {\r\n        this.containers[container.position].cards.splice(removedIndex,1);\r\n        this.updatePosition(removedIndex,addedIndex,container.position)\r\n      }\r\n      if (addedIndex !== null) {\r\n        this.draggingCard.cardData.containerID= container.id;\r\n        this.containers[container.position].cards.splice(addedIndex,0,this.draggingCard.cardData);\r\n        this.updatePosition(removedIndex,addedIndex,container.position)\r\n      }\r\n    },\r\n    getChildPayload: function (index) {\r\n      return {\r\n        index,\r\n      };\r\n    },\r\n    textUpdated: function($event,card){\r\n      //card.name = text;\r\n\r\n      console.log($event);\r\n    },\r\n    newCard: function(container){\r\n      var card = {\r\n        name: \"Cartão sem título \"+ this.idProv,\r\n        position: container.cards.length,\r\n        description: \"\",\r\n        containerID: container.id,\r\n      };\r\n      axios.post(\"https://localhost:44360/Cards\",card).then((res) =>{\r\n        card.id = res.data.id;\r\n        container.cards.push(card);\r\n      }).catch((err)=>{\r\n        console.log(err);\r\n      })\r\n      \r\n      \r\n\r\n    },\r\n\r\n    updatePosition: function(removedIndex,addedIndex,position)\r\n    {\r\n      if(removedIndex !== null && addedIndex !== null)\r\n      {\r\n        var menor = removedIndex < addedIndex? removedIndex : addedIndex;\r\n        for(; menor< this.containers[position].cards.length; menor++)\r\n        {\r\n          this.containers[position].cards[menor].position = menor;\r\n          this.updateDatabase(this.containers[position].cards[menor]);\r\n        }\r\n      }\r\n      else\r\n      {\r\n        var i=0;\r\n        if (removedIndex !== null) {\r\n          for(i=removedIndex; i<this.containers[position].cards.length;i++)\r\n          {\r\n            this.containers[position].cards[i].position=i;\r\n            this.updateDatabase(this.containers[position].cards[i]);\r\n          }\r\n        }\r\n        if (addedIndex !== null) {\r\n          for(i=addedIndex; i<this.containers[position].cards.length;i++)\r\n          {\r\n            this.containers[position].cards[i].position=i;\r\n            \r\n            this.updateDatabase(this.containers[position].cards[i]);\r\n          }\r\n        }\r\n      }\r\n      //console.log(this.containers);\r\n      \r\n    },\r\n    updateDatabase: function(card)\r\n    {\r\n      console.log(card);\r\n      axios.put(\"https://localhost:44360/Cards/\"+card.id,card).then().catch((err)=>{\r\n        console.log(err);\r\n      })\r\n    },\r\n    compare: function(a, b){\r\n      if(a.position > b.position) return 1;\r\n      if(b.position > a.position) return -1;\r\n\r\n      return 0;\r\n    }\r\n\r\n  },\r\n\r\n};\r\n</script>\r\n\r\n<style>\r\n.text {\r\n  text-align: left;\r\n}\r\n\r\n.board {\r\n  margin-top: 1%;\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: flex-start;\r\n}\r\n\r\n.Card {\r\n  background-color: #d7d7d7;\r\n  margin-left: 1%;\r\n}\r\n\r\n.placeholder {\r\n  background: #CECECE;\r\n  border-radius: 0.4rem;\r\n  transform: scaleY(0.85);\r\n  transform-origin: 0% 0%;\r\n}\r\n\r\n.lane {\r\n  width: 23rem;\r\n  box-shadow: 0 0.1rem 0.2rem 0 #dcdcdc;\r\n  margin: 1% 1%;\r\n}\r\n</style>"]}]}